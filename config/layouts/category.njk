---
layout: base.njk
---
<script src="https://cdn.jsdelivr.net/npm/fuse.js@7.1.0"></script>

<div class="container">
  <div class="header">
    <div class="header__breadcrumb">
      <a class="header__link" href="/">[Home]</a>&nbsp;>&nbsp;
      {% for crumb in crumbs %}
        <a class="header__link" href="{{ crumb.url }}">{{ crumb.title }}</a>&nbsp;>&nbsp;
      {% endfor %}
      <span>{{ title }}</span>
    </div>
  </div>

  <div class="tip">
    <h1 class="post__heading">{{ title }}</h1>

    <div class="post">
      <div class="post__content">
        {# <pre>{{ root | debug }}</pre> #}
        <p>{{ desc | md | safe }}</p>

          {% if root %}
            <div>
              <label for="search">Search</label><br>
              <input type="text" id="search" name="search">

              <div id="results"> </div>
            </div>
          {% endif %}

        {% if catTreeCount %}
          <div id="category-navigation">
            <h3>Category</h3>
            {% tree catTree %}
          </div>
        {% endif %}

        <div class="snippet-group-container">
          {% for group in collections.groupedSnippets[category].groups %}
            <div class="snippet-group-left">
              <h3><a href="{{snippetBase}}{{category}}{{ group | urlize }}">{{ group }}</a></h3>

              <ul>
                {% for snippet in collections.groupedSnippets[category].snippets[group] %}
                  <li><a href="{{ snippet.url }}">{{ snippet.title }}</a></li>
                {% endfor %}
              </ul>
            </div>
          {% endfor %}
        </div>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  // TODO: Please use templates
  // TODO: Please use a transform on this in the passthrough()
  const crumbsReadable = (crumbs) => crumbs.map(crumb => crumb.title).join(' > ')

  const snips = (r) => r.map(e => `<li><a href="${e.url}">${e.title}</a></li>`)

  const resSimplified = (results) => results.map(e => ({
    title: e.item.title,
    url: e.item.url,
    cat: e.item.cat,
    crumbs: e.item.crumbs.map(e => e.title).join(' > ')}))

  const resTpl = (results) => Object.keys(results)
    .map(key => `<div class="snippet-group-left"><p>${key}</p><ul>${snips(results[key]).join('')}</ul></div>`)
    .join('')

  const filteredResults = (results) => results.reduce((acc, curr) => {
    const cat = crumbsReadable(curr.item.crumbs)
    const next = {
      title: curr.item.title,
      crumbs: crumbsReadable(curr.item.crumbs),
      url: curr.item.url,
    }

    if (acc[cat] === undefined) {
      acc[cat] = []
    }

    return {
      ...acc,
      [cat]: [
        ...acc[cat],
        next,
      ],
    }
  }, {})

  const filterEvent = (fuse) => (e) => {
    const hasText = e.target.value !== ''
    const searchResults = fuse.search(e.target.value).slice(0, 50)
    const results = filteredResults(searchResults)
    const resCount = `<p>[Results: ${searchResults.length}]</p>`
    const resNone = (hasText) ? '<p>[Results: 0] No results for search value</p>' : ''
    const stuff = `<div class="snippet-group-container">${resTpl(results)}</div?`
    const output = (searchResults.length > 0) ? `${resCount} ${stuff}` : resNone

    document.getElementById('category-navigation').style.display = hasText ? 'none' : 'block'
    document.getElementById('results').innerHTML = output
  }

  const searchEvent = (json) => {
    const fuseOptions = { keys: [ 'cat', 'title' ] }
    const fuse = new Fuse(json, fuseOptions)

    document
      .getElementById('search')
      .addEventListener('input', filterEvent(fuse))
  }

  // I want to do this inline pls
  fetch('/assets/fuzzy.json')
    .then(response => response.json())
    .then(searchEvent)
</script>
